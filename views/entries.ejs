<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Lançamentos</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Manrope:wght@200..800&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');

        .header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0px 50px;
        }

        h1 {
            display: flex;
            align-items: center;
            font-family: "Manrope";

        }

        h1 a {
            margin-right: 25px;
            font-size: 15px;
            font-family: "Roboto";
            font-weight: bold;
        }

        a {
            font-size: 15px;
            font-family: "Roboto";
            font-weight: bold;
        }

        .containerInputETotais{
            display: flex;
            gap: 20px;
            padding: 20px;
            margin-left: 30px;
        }

        .total {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: start;
            gap: 10px;
            height: 100%;

            p{
            font-size: 15px;
            font-family: "Roboto";
            font-weight: bold;
            margin: 0px;
            }
        }

        .listar-mes {
            padding: 20px 0px;
            display: flex;
            align-items: end;
            justify-content: center;
            gap: 10px;
        }

        .containerInputDate {
            display: flex;
            flex-direction: column;

            label {
                font-size: 15px;
                font-family: "Roboto";
                font-weight: bold;
            }
        }

        .default-button {
            background-color: #2e6db1;
            color: #fff;
            border: none;
            border-radius: 5px;
            padding: 8px 40px;
            cursor: pointer;
            text-decoration: none;
            transition: background-color 0.2s ease;
        }

        .default-button:hover {
            background-color: #007bff;
        }

        .botao-cancelar {
            background-color: darkred;
            transition: background-color 0.2s ease;

            &:hover {
                background-color: red;
            }
        }

        .botao-pagar {
            background-color: green;
            transition: background-color 0.2s ease;

            &:hover {
                background-color: rgb(0, 172, 37);
            }
        }

        .date-input {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 3px;
            box-sizing: border-box;
        }

        .id {
            display: none;
        }

        .red {
            color: red;
        }

        .green {
            color: green;
        }

        .containerLarguraTotal{
            width: 100%;
            display: flex;
            justify-content: center;
        }

        .containerTabela {
            display: flex;
            justify-content: center;
            align-items: center;
            box-shadow: rgba(0, 0, 0, 0.16) 0px 3px 6px;
            background-color: white;
            width: max-content;
            padding: 20px;
            border-radius: 20px;
        }

        .teste{
            border-top-left-radius: 10px;
        }

        th {
            font-family: "Roboto";
            font-size: 16px;
            border: 1px solid rgb(128, 128, 128);
            padding: 5px;

        }

        .botaoSair{
            color: #fff;
            border: none;
            border-radius: 5px;
            padding: 8px 40px;
            cursor: pointer;
            text-decoration: none;
            transition: background-color 0.2s ease;
            background-color: darkred;

            &:hover{
                background-color: rgb(189, 29, 29);
            }
        }

        
    </style>
</head>

<body>
    <div class="header">
        <h1><a href="/admin" class="default-button admin-only">Home</a> Lançamentos</h1>
        <div>
            <a class="default-button botao-hoje-atrasadas">Despesas de Hoje/Atrasadas</a>
            <a class="default-button admin-only" href="/admin/cadastrar-entrada">Cadastrar/Editar lançamento</a>
            <a class="botaoSair" href="/logout">Sair</a>
        </div>        
    </div>

    <section class="containerInputETotais">
    <form class="listar-mes" action="/lancamentos" method="GET">
            <div class="containerInputDate">
                <label for="mes">Selecione o mês</label>
        <input type="month" id="mes" name="mes" class="date-input">
            </div>
        <button type="submit" class="default-button">Buscar</button>
    </form>
    <div>
        <%
            let totalDespesa = 0;
            let totalReceita = 0;
            function addRS(amount) {
                return `R$ ${amount}`;
            }
            entries.forEach(function(entry) {
                
                // Convert entry.value to integer before summing
                const value = parseInt(entry.value);
                if (entry.status !== 'Cancelada') {
                    if (entry.type === 'Despesa') {
                        totalDespesa += value;
                    } else if (entry.type === 'Receita') {
                        totalReceita += value;
                    }
                }                
            });
    
            %>
            <div class="total">
                        <p>Total de despesas: <%= addRS(totalDespesa) %></p>
                        <p>Total de receitas: <%= addRS(totalReceita) %></p>  
            </div>            
    </div>
    </section>
    

    <%- include('lembrete.ejs'); %>
    
        <section class="containerLarguraTotal">
            <div class="containerTabela">
    <table>
        <thead>
            <tr>
                <th class="teste">Tipo</th>
                <th>Categorias</th>
                <th>Descrição</th>
                <th>Valor</th>
                <th>Data de <br>Vencimento</th>
                <th>Data de <br>Pagamento</th>
                <th>Conta</th>
                <th>Status</th>
                <!-- <th>Comentários</th> -->
            </tr>
        </thead>
        <tbody>
            <%
            entries.sort((a, b) => new Date(a.due_date) - new Date(b.due_date));
            entries.forEach(function(entry) {
                function formatDate(dateString) {
                    if (dateString) {
                        const [year, month, day] = dateString.split('-');
                        return `${day}/${month}/${year}`;
                    }
                    return 'Não informado';
                }
                function addRS(amount) {
                    return `R$ ${amount}`;
                }
                %>
                <tr class="<%= entry.type === 'Despesa' ? 'red' : 'green' %>" <%= entry.status === 'Cancelada' ? 'style=text-decoration:line-through' : '' %>>
                    <td class="id"><%= entry.id %></td>
                    <td><%= entry.type %></td>
                    <td><%= entry.categories %></td>
                    <td><%= entry.description %></td>
                    <td><%= addRS(entry.value) %></td>
                    <td><%= formatDate(entry.due_date) %></td>
                    <td><%= formatDate(entry.payment_date) %></td>
                    <td><%= entry.account %></td>
                    <td><%= entry.status %></td>
                    <!-- <td><%= entry.comments %></td> -->
                    <td>
                        <button class="default-button botao-confirmar admin-only">Confirmar</button>
                        <button class="default-button botao-pagar admin-only">Pagar</button>
                        <button class="default-button botao-cancelar admin-only">Cancelar</button>
                    </td>
                </tr>                
            <% }); %>
        </tbody>
    </table>
            </div>
        </section>
    <script>        
        // Fetch user level from server
        const level = <%- JSON.stringify(level) %>;        
        if (level === 'admin') {
            document.querySelectorAll('.admin-only').forEach(item => {
                item.style.display = 'inline-block';
            });
        }
        else {
            document.querySelectorAll('.admin-only').forEach(item => {
                item.style.display = 'none';
            });
        }
        // console.log("LEVEL", level, "RESULT", level === 'admin');

        function cancelEntry(id) {
            if (confirm("Tem certeza que deseja cancelar essa entrada?")) {
                fetch(`/admin/cancelar-entrada/${id}`, {
                    method: 'PUT'
                })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        throw new Error('Erro ao cancelar');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            }
        }

        function payEntry(id) {
            if (confirm("Tem certeza que deseja pagar essa entrada?")) {
                fetch(`/admin/pagar-entrada/${id}`, {
                    method: 'PUT'
                })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        throw new Error('Erro ao pagar');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            }
        }

        function confirmEntry(id) {
            if (confirm("Tem certeza que deseja confirmar essa entrada?")) {
                fetch(`/admin/confirmar-entrada/${id}`, {
                    method: 'PUT'
                })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        throw new Error('Erro ao confirmar');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            }
        }
        openModal(<%- JSON.stringify(todayEntry) %>, <%- JSON.stringify(overdueEntries) %>);
        document.querySelectorAll('a.botao-hoje-atrasadas').forEach(button => {
            button.addEventListener('click', () => {         
                openModal(<%- JSON.stringify(todayEntry) %>, <%- JSON.stringify(overdueEntries) %>);
            });
        });

        document.querySelectorAll('button.botao-confirmar').forEach(button => {
            button.addEventListener('click', () => {
                const Id = button.parentNode.parentNode.querySelector('.id').textContent;            
                confirmEntry(Id);
            });
        });

        document.querySelectorAll('button.botao-pagar').forEach(button => {
            button.addEventListener('click', () => {
                const Id = button.parentNode.parentNode.querySelector('.id').textContent;
                payEntry(Id);
            });
        });

        document.querySelectorAll('button.botao-cancelar').forEach(button => {
            button.addEventListener('click', () => {
                const Id = button.parentNode.parentNode.querySelector('.id').textContent;   
                cancelEntry(Id);
            });
        });
    </script>
</body>

</html>