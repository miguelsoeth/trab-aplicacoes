<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lançamentos</title>
    <style>
        .header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0px 50px;
        }

        h1 {
            display: flex;
            align-items: center;
        }

        h1 a {
            margin-right: 25px;
            font-size: 14px;
        }

        .listar-mes {
            padding: 20px 0px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        .default-button {
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 5px;
            padding: 8px 40px;
            cursor: pointer;
            text-decoration: none;
        }
        .default-button:hover {
            background-color: #0056b3;
        }

        .date-input {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 3px;
            box-sizing: border-box;
        }

        .id {
            display: none;
        }

        .red {
            color:red;
        }

        .green {
            color:green;
        }

        table {
            margin: auto;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1><a href="/admin" class="default-button admin-only">Home</a> Lançamentos</h1>
        <div>
            <a class="default-button admin-only" href="/admin/cadastrar-entrada">Cadastrar/Editar lançamento</a>
            <a class="default-button" href="/logout">Logout</a>
        </div>        
    </div>

    <form class="listar-mes" action="/lancamentos" method="GET">
        <label for="mes">Listar Lançamentos por Mês: </label>        
        <input type="month" id="mes" name="mes" class="date-input">
        <button type="submit" class="default-button">Buscar</button>
    </form> 

    <%- include('lembrete.ejs'); %>
    
    <table>
        <thead>
            <tr>
                <th>Tipo</th>
                <th>Categorias</th>
                <th>Descrição</th>
                <th>Valor</th>
                <th>Data de Vencimento</th>
                <th>Data de Pagamento</th>
                <th>Conta</th>
                <th>Status</th>
                <!-- <th>Comentários</th> -->
            </tr>
        </thead>
        <tbody>
            <%
            entries.sort((a, b) => new Date(a.due_date) - new Date(b.due_date));
            entries.forEach(function(entry) {
                function formatDate(dateString) {
                    const [year, month, day] = dateString.split('-');
                    return `${day}/${month}/${year}`;
                }
                function addRS(amount) {
                    return `R$ ${amount}`;
                }
                %>
                <tr class="<%= entry.type === 'Despesa' ? 'red' : 'green' %>" <%= entry.status === 'Cancelada' ? 'style=text-decoration:line-through' : '' %>>
                    <td class="id"><%= entry.id %></td>
                    <td><%= entry.type %></td>
                    <td><%= entry.categories %></td>
                    <td><%= entry.description %></td>
                    <td><%= addRS(entry.value) %></td>
                    <td><%= formatDate(entry.due_date) %></td>
                    <td><%= formatDate(entry.payment_date) %></td>
                    <td><%= entry.account %></td>
                    <td><%= entry.status %></td>
                    <!-- <td><%= entry.comments %></td> -->
                    <td>
                        <button class="default-button botao-confirmar admin-only">Confirmar</button>
                        <button class="default-button botao-pagar admin-only">Pagar</button>
                        <button class="default-button botao-cancelar admin-only">Cancelar</button>
                    </td>
                </tr>                
            <% }); %>
        </tbody>
    </table>
    <script>
        openModal(<%- JSON.stringify(todayEntry) %>, <%- JSON.stringify(overdueEntries) %>);
        // Fetch user level from server
        const level = <%- JSON.stringify(level) %>;        
        if (level === 'admin') {
            document.querySelectorAll('.admin-only').forEach(item => {
                item.style.display = 'inline-block';
            });
        }
        else {
            document.querySelectorAll('.admin-only').forEach(item => {
                item.style.display = 'none';
            });
        }
        // console.log("LEVEL", level, "RESULT", level === 'admin');

        function cancelEntry(id) {
            if (confirm("Tem certeza que deseja cancelar essa entrada?")) {
                fetch(`/admin/cancelar-entrada/${id}`, {
                    method: 'PUT'
                })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        throw new Error('Erro ao cancelar');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            }
        }

        function payEntry(id) {
            if (confirm("Tem certeza que deseja pagar essa entrada?")) {
                fetch(`/admin/pagar-entrada/${id}`, {
                    method: 'PUT'
                })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        throw new Error('Erro ao pagar');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            }
        }

        function confirmEntry(id) {
            if (confirm("Tem certeza que deseja confirmar essa entrada?")) {
                fetch(`/admin/confirmar-entrada/${id}`, {
                    method: 'PUT'
                })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        throw new Error('Erro ao confirmar');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            }
        }

        document.querySelectorAll('button.botao-confirmar').forEach(button => {
            button.addEventListener('click', () => {
                const Id = button.parentNode.parentNode.querySelector('.id').textContent;            
                confirmEntry(Id);
            });
        });

        document.querySelectorAll('button.botao-pagar').forEach(button => {
            button.addEventListener('click', () => {
                const Id = button.parentNode.parentNode.querySelector('.id').textContent;
                payEntry(Id);
            });
        });

        document.querySelectorAll('button.botao-cancelar').forEach(button => {
            button.addEventListener('click', () => {
                const Id = button.parentNode.parentNode.querySelector('.id').textContent;   
                cancelEntry(Id);
            });
        });
    </script>
</body>
</html>
